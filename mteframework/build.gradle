plugins {
    id 'com.android.library'
    id 'maven-publish' // Add this line
}

android {
    compileSdk 34

    defaultConfig {
        minSdk 24
        targetSdk 34

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    namespace 'com.mte.mteframework'
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'


    implementation 'com.android.volley:volley:1.2.1'
}

// mteframework/build.gradle

// ... (plugins, android block, dependencies) ...

afterEvaluate {
    publishing {
        publications {
            // Creates a publication named "release" (you can choose other names)
            release(MavenPublication) {
                // JitPack will automatically use:
                // group = "com.github.YourGitHubUsername" (e.g., "com.github.odanielhz")
                // version = "YourGitTagOrReleaseVersion" (e.g., "2.0.17")

                // The artifactId is typically taken from the module name.
                // If your module is named 'mteframework', artifactId will usually be 'mteframework'.
                // You can explicitly set it, but it's often better to let JitPack infer it
                // or ensure your module name matches the desired artifactId.
                //
                // For example, if you needed to explicitly set it:
                // groupId = 'com.github.odanielhz'
                // artifactId = 'mteframework'
                // version = project.version // Or your specific version string

                // This line tells Gradle to publish the "release" component of your Android library.
                // This component includes your AAR file.
                from components.release

                // Optionally, include sources and Javadoc (good practice for libraries)
                // You might need to configure JavaDoc/sources JAR tasks separately if they aren't
                // generated by default or if you want specific configurations.

                // Example for including sources (if a 'sourcesJar' task is configured):
                // artifact tasks.sourcesJar
                // Example for including Javadoc (if a 'javadocJar' task is configured):
                // artifact tasks.javadocJar
            }
            // You could define other publications here, e.g., for a "debug" version
            // debug(MavenPublication) {
            //     from components.debug
            //     // ... other configurations
            // }
        }
        repositories {
            // The `publishToMavenLocal` task used by JitPack doesn't strictly need this block.
            // This block is for defining remote repositories where you might publish.
            // For JitPack, the key is that `publishToMavenLocal` works correctly.
            // Example:
            // maven {
            //     name = "MyCustomRepo"
            //     url = "uri_to_your_repo"
            // }
        }
    }
}
